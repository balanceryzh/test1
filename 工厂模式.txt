简单工厂模式  
 工厂模式，顾名思义，最少有一个生产产品的机器存在的工厂Factory，与此同时，也要有一个构建好的产品模块Product。所以，我们要用到Factory来创造Product。在简单工厂模式中，有几种角色存在。一个是所有产品的父类P，即所有产品的模板；另外一个是继承了父类P的产品子类p1，p2...;当然，最重要的是Factory，在Factory中可以将这些的产品实例化，根据需求来将Factory和Product产生联系。

 这就是最简单的工厂模式，说到优点，这个简单工厂用了继承，将决定工厂的生产什么产品的决定权直接交到了客户手中，然后客户在输入自己的需求，得到最终的结果。

这样模块清晰化，每个部分都各司其职，分工明确，代码就实现最渐层意义上的“可维护”啦。说到缺点，当我们需要增加一产品，比如在计算机中加入一个新的功能，可以求M的N次方，这样个小功能我们就要去添加一个新的类，同时我们需要在Factory中改动到switch里面的代码，这是耦合性很高的表现啦，所以我们就有了“工厂模式”的出现啦。

在“工厂模式”和“简单工厂模式”中，最主要，最明显的区别之一是“工厂模式”下可以设立多个子工厂，而不是所有的产品有单一的工厂来生产，而是给各自特色的子工厂来生产。

b.比“简单工厂模式”的优缺点

优点：克服了简单工厂违背开放-封闭原则的缺点，又保留了封装对象创建过程的优点,降低客户端和工厂的耦合性，所以说“工厂模式”是“简单工厂模式”的进一步抽象和推广。

缺点：每增加一个产品，相应的也要增加一个子工厂，加大了额外的开发量。

抽象工厂模式的优缺点：

优点：

1. 抽象工厂模式最大的好处是易于交换产品系列，由于具体工厂类，例如?IFactory factory=new OracleFactory();?在一个应用中只需要在初始化的时候出现一次，这就使得改变一个应用的具体工厂变得非常容易，它只需要改变具体工厂即可使用不同的产品配置。不管是任何人的设计都无法去完全防止需求的更改，或者项目的维护，那么我们的理想便是让改动变得最小、最容易，例如我现在要更改以上代码的数据库访问时，只需要更改具体的工厂即可。

2. 抽象工厂模式的另一个好处就是它让具体的创建实例过程与客户端分离，客户端是通过它们的抽象接口操作实例，产品实现类的具体类名也被具体的工厂实现类分离，不会出现在客户端代码中。就像我们上面的例子，客户端只认识IUser和ILogin，至于它是MySQl里的表还是Oracle里的表就不知道了。

缺点：

1. 如果你的需求来自增加功能，比如增加Login表，就有点太烦了。首先需要增加 ILogin，mysqlLogin,oracleLogin。 然后我们还要去修改工厂类： sqlFactory， mysqlFactory， oracleFactory 才可以实现，需要修改三个类，实在是有点麻烦。

2. 还有就是，客户端程序肯定不止一个，每次都需要声明sqlFactory factory=new MysqlFactory()， 如果有100个调用数据库的类，就需要更改100次sqlFactory factory=new oracleFactory()

 