下面具体给出策略的定义。策略模式是针对一组计算方法，将每个计算方法封装到具有公共接口的独立的类中，从而使它们可以相互替换。策略模式使得计算方法可以在不影响到客户端的情况下发生变化。
策略模式的优缺点


策略模式的优点
算法可以自由的切换，通过实现抽象策略，通过封装角色对其封装，保证对外提供“可自由切换”的策略。
避免使用多重条件判断，如果有多重策略，那么每个策略只需实现自己的方法，至于采用何种策略，可以通过其他模块决定。
扩展性良好，可以在现有的系统中任意的加入新的策略，只需继承IStrategy接口，符合OCP原则。
易于扩展。增加一个新的策略只需要添加一个具体的策略类即可，基本不需要改变原有的代码。
避免使用多重条件选择语句，充分体现面向对象设计思想。


策略模式的缺点
策略类数量增多，每个策略都是一个类，复用的可能性很小，类数量增多
所有的策略都需要对外暴露，上层模块必须知道有哪些策略，然后才能知道采用哪种策略，
客户端必须知道所有的策略类，并自行决定使用哪一个策略类

可以通过使用工厂方法模式、代理模式和享元模式修正。
。这点可以考虑使用IOC容器和依赖注入的方式来解决，关于IOC容器和依赖注入（Dependency Inject）的文章可以参考：IoC 容器和Dependency Injection 模式。
策略模式会造成很多的策略类。

简单工厂模式和策略模式到底有什么不同呢？

    1、关注点不同：工厂模式封装的是复杂对象的创建，而策略模式封装的是一个对象的多种行为。PlayContex如果作为工厂，肯定返回一个play对象，如果作为策略，肯定执行一个Play对象的行为。

    2、策略模式可以使客户端避免直接接触算法的一些细节，工厂模式可以使客户端不必关心对象的构造过程。
	
在下面的情况下可以考虑使用策略模式：

一个系统需要动态地在几种算法中选择一种的情况下。那么这些算法可以包装到一个个具体的算法类里面，并为这些具体的算法类提供一个统一的接口。
如果一个对象有很多的行为，如果不使用合适的模式，这些行为就只好使用多重的if-else语句来实现，此时，可以使用策略模式，把这些行为转移到相应的具体策略类里面，就可以避免使用难以维护的多重条件选择语句，并体现面向对象涉及的概念。



策略模式
解决了客户端需求和多种算法模式的分离,定义一个中间类就可以实现算法变换



	