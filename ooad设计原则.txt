设计原则
一）单一职责
Single Responsibility Principle，SRP
定义：所有的对象都应该有单一的职责，它提供的所有的服务也都仅围绕着这个职责。
二）开闭原则   开闭原则是面向对象设计的核心所在
开闭原则（Open-Close Principle，简称OCP）是指一个软件实体（类、模块、方法等）应该对扩展开放，对修改关闭。
遵循开闭原则设计出来的模块具有两个基本特征：
对于扩展是开放的（Open for extension）：模块的行为可以扩展，当应用的需求改变时，可以对模块进行扩展，以满足新的需求。
对于更改是封闭的（Closed for modification）：对模块行为扩展时，不必改动模块的源代码或二进制代码。
三）里氏替换原则
里氏替换原则（The Liskov Substitution Principle，LSP）
定义：在一个软件系统中，子类应该能够完全替换任何父类能够出现的地方，并且经过替换后，不会让调用父类的客户程序从行为上有任何改变。里氏替换原则常用来检查两个类是否为继承关系。
最典型的例子：
正方形不是长方形
鸵鸟不是鸟
四）依赖倒转原则
依赖倒转原则（Dependency Inversion Principle，简称DIP）是指将两个模块之间的依赖关系倒置为依赖抽象类或接口。
具体有两层含义：
高层模块（调用类）不应该依赖于低层模块（被调用的类），二者都应该依赖于抽象；
抽象不应该依赖于细节，细节应该依赖于抽象。
要针对接口编程，不要针对实现编程
五）组合/聚合复用原则
组合/聚合复用原则（Composite/Aggregation Reuse Principle，CARP）
定义：是指要尽量使用组合/聚合而非继承来达到复用目的。另一种解释是在一个新的对象中使用一些已有的对象，使之成为新对象的一部分；新的对象通过向这些对象委托功能达到复用这些对象的目的。 
 六）接口隔离原则
接口隔离原则（Interface Segregation Principle，ISP）
定义：是指客户不应该依赖它们用不到的方法，只给每个客户它所需要的接口。换句话说，就是不能强迫用户去依赖那些他们不使用的接口。
接口的设计原则：接口的设计应该遵循最小接口原则，不要把用户不使用的方法塞进同一个接口里。
接口的继承原则：如果一个接口A继承另一个接口B，则接口A相当于继承了接口B的方法，那么继承了接口B后的接口A也应该遵循上述原则：不应该包含用户不使用的方法。
七）迪米特法则
迪米特法则（Law of Demeter，LOD），又称为“最少知识原则”，
定义：一个软件实体应当尽可能少的与其他实体发生相互作用。
最典型的例子：不要和陌生人说话。